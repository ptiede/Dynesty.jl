var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Dynesty","category":"page"},{"location":"#Dynesty","page":"Home","title":"Dynesty","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Dynesty.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Dynesty]","category":"page"},{"location":"#Dynesty.dyplot","page":"Home","title":"Dynesty.dyplot","text":"`dyplot`\n\nObject that holds the plotting submodule of the dynesty package\n\n\n\n\n\n","category":"constant"},{"location":"#Dynesty.DynamicNestedSampler","page":"Home","title":"Dynesty.DynamicNestedSampler","text":"`DyamicNestedSampler`\n\nJulia interface to the dynesty DynamicNestedSampler class. Note that we do not pass the loglikelihood or prior transform function here. Instead this is passed to the sample` call.\n\nExample\n\n# define a distribution\nd = MvNormal(ones(10))\n\nloglikelihood(x) = logpdf(d, x)\n\nprior_transform(p) = -10.0 .+ 20.0.*p\n\nsmplr = NestedSampler(10)\n\n# sample using dynamic nested sampling with 500 initial live points\nres = sample(loglikelihood, prior_transform, smplr; dlogz=0.5, nlive_init=500)\n\n\n\n\n\n","category":"type"},{"location":"#Dynesty.DynestyOutput","page":"Home","title":"Dynesty.DynestyOutput","text":"DynestyOutput\n\nA objects that holds the dynesty output as well as the sampler. This object can be passed to the plotting functions to produce the usual dynesty diagnostic plots.\n\nNotes\n\nWe have also implemented a limited number of Julia's Dictionary interface so you can access the output in the usual Dynesty manner\n\nExample\n\n# define a distribution\nd = MvNormal(ones(10))\n\nloglikelihood(x) = logpdf(d, x)\n\n# We only look at finite region of parameter space\nprior_transform(p) = -5.0 .+ 10.0.*p\n\nsmplr = NestedSampler(10)\n\n# sample using dynamic nested sampling with 500 initial live points\nres = sample(loglikelihood, prior_transform, smplr; dlogz=0.5, nlive_init=500)\n\n# fetch the samples\nres[:samples]\n\n# print the keys\nkeys(res)\n\n\n\n\n\n","category":"type"},{"location":"#Dynesty.NestedSampler","page":"Home","title":"Dynesty.NestedSampler","text":"`NestedSampler`\n\nJulia interface to the dynesty NestedSampler class. Note that we do not pass the loglikelihood or prior transform function here. Instead this is passed to the sample` call.\n\nExample\n\n# define a distribution\nd = MvNormal(ones(10))\n\nloglikelihood(x) = logpdf(d, x)\n\nprior_transform(p) = -10.0 .+ 20.0.*p\n\nsmplr = NestedSampler(10)\n\nres = sample(loglikelihood, prior_transform, smplr; dlogz=0.5)\n\n\n\n\n\n","category":"type"},{"location":"#Base.merge-Tuple{Vararg{Dynesty.DynestyOutput}}","page":"Home","title":"Base.merge","text":"merge(args::DynestyOutput...; print_progres=true)\n\nRuns dynesty's merge_runs to combine multiple separate dynesty runs.\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.boundplot-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.boundplot","text":"boundplot(d::DynestyOutput; kwargs...)\n\nProduces the boundplot plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.cornerbound-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.cornerbound","text":"cornerbound(d::DynestyOutput; kwargs...)\n\nProduces the cornerbound plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.cornerplot-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.cornerplot","text":"cornerplot(d::DynestyOutput; kwargs...)\n\nProduces the cornerplot plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.cornerpoints-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.cornerpoints","text":"cornerpoints(d::DynestyOutput; kwargs...)\n\nProduces the cornerpoints plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.resample_equal-Tuple{Dynesty.DynestyOutput, Int64}","page":"Home","title":"Dynesty.resample_equal","text":"resample_equal(res::DynestyOutput, nsamples::Int)\n\nResample the dynesty nested sampling run so that the samples have equal weighting. This uses the StatsBase algorithm under the hood.\n\nThe results are a vector of vectors where the inner vector corresponds to the samples.\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.runplot-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.runplot","text":"runplot(d::DynestyOutput; kwargs...)\n\nProduces the runplot plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#Dynesty.traceplot-Tuple{Dynesty.DynestyOutput, Vararg{Any}}","page":"Home","title":"Dynesty.traceplot","text":"traceplot(d::DynestyOutput; kwargs...)\n\nProduces the traceplot plot from the dynesty.plotting module. For a list of possible kwargs see the dynesty documentation at [dynesty.readthedocs.io]\n\n\n\n\n\n","category":"method"},{"location":"#StatsBase.sample-Tuple{Any, Any, DynamicNestedSampler}","page":"Home","title":"StatsBase.sample","text":"`sample(loglikelihood, prior_transform, s::DynamicNestedSampler; kwargs...)`\n\nRuns dynesty's DynamicNestedSampler algorithm with the specified loglikelihood and priortransform. The loglikelihood and priortransform are functions. For the specific relevant kwargs see the dynesty documentation at [https://dynesty.readthedocs.io/]\n\n\n\n\n\n","category":"method"},{"location":"#StatsBase.sample-Tuple{Any, Any, NestedSampler}","page":"Home","title":"StatsBase.sample","text":"`sample(loglikelihood, prior_transform, s::NestedSampler; kwargs...)`\n\nRuns dynesty's NestedSampler algorithm with the specified loglikelihood and priortransform. The loglikelihood and priortransform are functions. For the specific relevant kwargs see the dynesty documentation at [https://dynesty.readthedocs.io/]\n\n\n\n\n\n","category":"method"}]
}
